#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('RefineMe:server');
var http = require('http');
var mongo = require('mongodb').MongoClient;
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
    console.log("Express server listening on port " + port)
});
server.on('error', onError);
server.on('listening', onListening);

mongo.connect('mongodb://admin:admin@ds019478.mlab.com:19478/refineme', function (err, db) {
    if (err) throw err;

    console.log("Server started successfully!");

    io.on('connection', function (socket) {
        var userName;
        console.log('a user connected');

        var join = require("./socketHandler/join.js");
        socket.on('join', function (data) {
            join(socket, db, data);
        });

        var createSession = require("./socketHandler/createSession.js");
        socket.on('create_session', function(data) {
            createSession(socket, db, data);
        });

        var sessionConnection = require("./socketHandler/sessionConnection.js");
        socket.on('session-connection', function (data) {
            sessionConnection(io, socket, db, data);
        });

        socket.on('leave-session', function (data) {
            var sessions = db.collection('sessions');

            sessions.find({
                'token': data.token
            }).toArray(function (err, res) {
                if (err) throw err;
                var session = res[0];
                var index = session.users.indexOf(data.user_name);
                if (index > -1) {
                    session.users.splice(index, 1);
                }

                sessions.update({token: session.token}, {
                    $set: {
                        users: session.users
                    }
                }, function () {
                    socket.emit('redirect', 'login');
                    socket.broadcast.to(data.token).emit('update-view', session);
                });
            });
            console.log('user disconnected');
        });

        socket.on('disconnect', function () {
            console.log('user ' + userName + ' disconnected');
        });
    });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
